import { OrderService } from './src/services/orderService';
import { LeadService } from './src/services/leadService';
import { connectDatabase } from './src/config/database';

/**
 * Script de teste para demonstrar a funcionalidade do banco MongoDB
 * com verifica√ß√£o de primeiro pedido e integra√ß√£o com leads
 */

const testOrderData = {
  userId: 'user123',
  customerInfo: {
    firstName: 'Jo√£o',
    lastName: 'Silva',
    cpf: '12345678901',
    email: 'joao.silva@email.com',
    phone: '11999999999'
  },
  items: [
    {
      productId: 'coxinha123',
      productName: 'Coxinha de Frango',
      quantity: 10,
      unitPrice: 3.50,
      subtotal: 35.00,
      notes: 'Sem cebola'
    },
    {
      productId: 'pastel456',
      productName: 'Pastel de Queijo',
      quantity: 5,
      unitPrice: 4.00,
      subtotal: 20.00
    }
  ],
  paymentInfo: {
    method: 'PIX' as const,
    amount: 65.00
  },
  deliveryInfo: {
    address: {
      street: 'Rua das Coxinhas',
      number: '123',
      complement: 'Apto 45',
      neighborhood: 'Centro',
      city: 'S√£o Paulo',
      state: 'SP',
      zipCode: '01234567'
    },
    deliveryFee: 10.00,
    deliveryInstructions: 'Tocar interfone 45'
  },
  pricing: {
    subtotal: 55.00,
    deliveryFee: 10.00,
    discount: 0,
    tax: 0,
    total: 65.00
  },
  leadSource: 'FACEBOOK_ADS',
  campaign: 'SUMMER2024',
  medium: 'social',
  content: 'video_ad_1',
  notes: 'Cliente pediu para deixar na portaria'
};

async function runTest() {
  console.log('üöÄ Iniciando teste do banco MongoDB...\n');

  try {
    // Conectar ao banco
    await connectDatabase();
    console.log('‚úÖ Conectado ao MongoDB\n');

    const orderService = new OrderService();
    const leadService = new LeadService();

    // Teste 1: Verificar se √© primeiro pedido
    console.log('üîç Teste 1: Verificando se √© primeiro pedido...');
    const firstOrderCheck = await orderService.checkFirstOrder({ cpf: '12345678901' });
    console.log('Resultado:', firstOrderCheck);
    console.log('');

    // Teste 2: Criar pedido
    console.log('üõí Teste 2: Criando pedido...');
    const order = await orderService.createOrder(testOrderData);
    console.log('Pedido criado com sucesso!');
    console.log(`ID do pedido: ${order.orderId}`);
    console.log(`√â primeiro pedido: ${order.isFirstOrder}`);
    console.log(`Valor total: R$ ${order.pricing.total}`);
    console.log(`Frete: R$ ${order.pricing.deliveryFee}`);
    console.log('');

    // Teste 3: Verificar novamente se √© primeiro pedido
    console.log('üîç Teste 3: Verificando novamente se √© primeiro pedido...');
    const secondCheck = await orderService.checkFirstOrder({ cpf: '12345678901' });
    console.log('Resultado:', secondCheck);
    console.log('');

    // Teste 4: Obter hist√≥rico do cliente
    console.log('üìã Teste 4: Obtendo hist√≥rico do cliente...');
    const history = await orderService.getCustomerOrderHistory('12345678901');
    console.log(`Cliente tem ${history.length} pedido(s)`);
    console.log('√öltimo pedido:', history[0]?.orderId);
    console.log('');

    // Teste 5: Estat√≠sticas de pedidos
    console.log('üìä Teste 5: Obtendo estat√≠sticas...');
    const stats = await orderService.getOrderStatistics();
    console.log('Estat√≠sticas:', JSON.stringify(stats, null, 2));
    console.log('');

    // Teste 6: Analytics de leads
    console.log('üìà Teste 6: Obtendo analytics de leads...');
    const leadAnalytics = await leadService.getLeadAnalytics({});
    console.log('Analytics de leads:', JSON.stringify(leadAnalytics, null, 2));
    console.log('');

    // Teste 7: Criar segundo pedido com mesmo CPF
    console.log('üõí Teste 7: Criando segundo pedido com mesmo CPF...');
    const secondOrderData = {
      ...testOrderData,
      items: [
        {
          productId: 'empada789',
          productName: 'Empada de Palmito',
          quantity: 3,
          unitPrice: 5.00,
          subtotal: 15.00
        }
      ],
      pricing: {
        subtotal: 15.00,
        deliveryFee: 10.00,
        discount: 0,
        tax: 0,
        total: 25.00
      }
    };
    
    const secondOrder = await orderService.createOrder(secondOrderData);
    console.log('Segundo pedido criado!');
    console.log(`ID do pedido: ${secondOrder.orderId}`);
    console.log(`√â primeiro pedido: ${secondOrder.isFirstOrder}`);
    console.log(`Frete aplicado: R$ ${secondOrder.pricing.deliveryFee}`);
    console.log('');

    console.log('‚úÖ Todos os testes conclu√≠dos com sucesso!');
    console.log('\nüéØ Funcionalidades testadas:');
    console.log('  - Verifica√ß√£o de primeiro pedido');
    console.log('  - Cria√ß√£o de pedidos com integra√ß√£o de leads');
    console.log('  - Hist√≥rico de pedidos por cliente');
    console.log('  - Estat√≠sticas e analytics');
    console.log('  - Aplica√ß√£o autom√°tica de frete gr√°tis no primeiro pedido');
    console.log('  - Rastreamento de origem dos pedidos (campanhas)');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    console.log('\nüèÅ Teste finalizado!');
    process.exit(0);
  }
}

// Executar teste
runTest();